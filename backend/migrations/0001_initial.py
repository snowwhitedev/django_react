# Generated by Django 2.2.11 on 2020-03-23 11:27

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import markdownx.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CronLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(default='cron log', max_length=256)),
                ('cron_time', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128)),
                ('description', models.TextField()),
                ('body', models.TextField()),
                ('policyItems', models.TextField(default=None)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(null=True, to='auth.Group')),
            ],
        ),
        migrations.CreateModel(
            name='EmailPattern',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern', models.CharField(max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='GoogleAccount',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('gavatar', models.CharField(default=None, max_length=256, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PolicyItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('docTitle', models.CharField(max_length=256)),
                ('itemText', models.TextField()),
                ('importance', models.PositiveSmallIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policyId', models.CharField(max_length=256)),
                ('question', markdownx.models.MarkdownxField()),
                ('answer', markdownx.models.MarkdownxField()),
                ('showed_at', models.DateTimeField(default=None, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Repetition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('userrep_id', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('finished', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'userrep_id')},
            },
        ),
        migrations.CreateModel(
            name='PolicyItemQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('policy', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='backend.PolicyItem')),
                ('questions', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.SET_DEFAULT, to='backend.Question')),
            ],
        ),
        migrations.CreateModel(
            name='InitialComplete',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserHandbook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('finished', models.BooleanField(default=False)),
                ('first', models.BooleanField(default=False)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Document')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.PolicyItem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'document', 'policy')},
            },
        ),
        migrations.CreateModel(
            name='RepetitionItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('itemNo', models.PositiveSmallIntegerField(default=1)),
                ('answer', models.IntegerField(default=-1)),
                ('answered_at', models.DateTimeField(default=None, null=True)),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.PolicyItem')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Question')),
                ('repetition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backend.Repetition')),
            ],
            options={
                'unique_together': {('repetition', 'policy')},
            },
        ),
    ]
